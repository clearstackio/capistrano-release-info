namespace :release-info do
  desc 'Restart your ReleaseInfo application'
  task :restart do
    restart_with_touch = fetch(:release-info_restart_with_touch, nil)
    if restart_with_touch.nil? && fetch(:sshkit_backend) == SSHKit::Backend::Printer
      run_locally do
        fatal "In a dry run, we cannot check the release-info version, and therefore can't guess which release-info restart method to use.  Therefore, using --dry-run without setting `release-info_restart_with_touch` to either `true` or `false` is not supported."
      end
      exit
    end
    on roles(fetch(:release-info_roles)), in: fetch(:release-info_restart_runner), wait: fetch(:release-info_restart_wait), limit: fetch(:release-info_restart_limit) do
      with fetch(:release-info_environment_variables) do
        within(fetch(:release-info_in_gemfile, false) ? release_path : "") do
          if restart_with_touch.nil?
            # 'release-info -v' may output one of the following depending on the version:
            # Phusion ReleaseInfo version x.x.x
            # Phusion ReleaseInfo Enterprise version x.x.x
            # Phusion ReleaseInfo x.x.x
            # Phusion ReleaseInfo Enterprise x.x.x
            release-info_version = capture(:release-info, '-v').match(/^Phusion ReleaseInfo (Enterprise )?(version )?(.*)$/)[3]
            restart_with_touch = Gem::Version.new(release-info_version) < Gem::Version.new('4.0.33')
          end

          if restart_with_touch
            execute :mkdir, '-p', release_path.join('tmp')
            execute :touch, release_path.join('tmp/restart.txt')
          else
            restart_command = fetch(:release-info_restart_command).split(" ").collect(&:to_sym) << fetch(:release-info_restart_options)
            if fetch(:release-info_restart_with_sudo)
              # We preprocess the command with SSHKit::Command to allow 'release-info-config' to be transformed with the command map.
              restart_command = [:sudo, SSHKit::Command.new(*restart_command).to_s]
            end
            execute *restart_command
          end
        end
      end
    end
  end

  task :test_which_release-info do
    on roles(fetch(:release-info_roles)) do
      set(:release-info_in_path, test(:which, :release-info))
    end
  end

  namespace :rvm do
    task hook: :"release-info:test_which_release-info" do
      unless fetch(:release-info_in_path)
        if fetch(:release-info_rvm_ruby_version) == fetch(:rvm_ruby_version)
          set :rvm_map_bins, fetch(:rvm_map_bins) + [:release-info, :'release-info-config', :'release-info-status']
        else
          after :'rvm:hook', :'release-info:rvm:after_rvm_path_is_set'
        end
      end
    end

    task :after_rvm_path_is_set do
      # This is very similar to code in capistrano-rvm.  Ideally, there would be a way to hook into that code instead of duplicating it with only minor changes.
      release-info_rvm_prefix = "#{fetch(:rvm_path)}/bin/rvm #{fetch(:release-info_rvm_ruby_version)} do"
      [:release-info, :'release-info-config', :'release-info-status'].each do |command|
        SSHKit.config.command_map.prefix[command.to_sym].unshift(release-info_rvm_prefix)
      end
    end
  end

  namespace :rbenv do
    task hook: :"release-info:test_which_release-info" do
      set :rbenv_map_bins, fetch(:rbenv_map_bins) + [:release-info, :'release-info-config', :'release-info-status'] unless fetch(:release-info_in_path)
    end
  end

  namespace :chruby do
    task hook: :"release-info:test_which_release-info" do
      set :chruby_map_bins, fetch(:chruby_map_bins) + [:release-info, :'release-info-config', :'release-info-status'] unless fetch(:release-info_in_path)
    end
  end

  namespace :bundler do
    task :hook do
      set :bundle_bins, fetch(:bundle_bins) + [:release-info, :'release-info-config', :'release-info-status'] if fetch(:release-info_in_gemfile, false)
    end
  end
end

namespace :load do
  task :defaults do
    set :release-info_roles, :app
    set :release-info_restart_runner, :sequence
    set :release-info_restart_wait, 5
    set :release-info_restart_limit, 2
    set :release-info_restart_with_sudo, false
    set :release-info_environment_variables, {}
    set :release-info_restart_command, 'release-info-config restart-app'
    set :release-info_restart_options, -> { "#{deploy_to} --ignore-app-not-running" }
    set :release-info_rvm_ruby_version, ->{ fetch(:rvm_ruby_version) }
    _tasks = Rake.application.tasks.collect(&:to_s)
    if _tasks.include?("bundler:map_bins")
      before :'bundler:map_bins', :'release-info:bundler:hook'
    end
    if _tasks.include?("rvm:hook")
      before :'rvm:hook', :'release-info:rvm:hook'
    elsif _tasks.include?("rbenv:map_bins")
      before :'rbenv:map_bins', :'release-info:rbenv:hook'
    elsif _tasks.include?("chruby:map_bins")
      before :'chruby:map_bins', :'release-info:chruby:hook'
    end
  end
end
